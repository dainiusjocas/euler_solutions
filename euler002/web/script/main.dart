/*
Problem #2
Even Fibonacci numbers

Each new term in the Fibonacci sequence is generated by adding the previous two terms.
By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million,
find the sum of the even-valued terms.
 */
void main() {
  int upperLimit = 4000000;
  Function isSmallerThen4M = makeOneArgumentFunctionWithSecondArgumentAsDefaultOne(isGreaterOrEqualThan, upperLimit);

  int sumOfEvenFibSmallerThan4M =
    new List<int>
      .generate(getFibIndex(isSmallerThen4M), (x) => getFib(x))
      .where((n) => isEven(n))
      .reduce((a, b) => a + b);

  print(sumOfEvenFibSmallerThan4M);
}

/*
Checks if a is greater or equal than b.
 */
bool isGreaterOrEqualThan(int a, int b) =>
  a >= b ? true : false;

/*
Lexical closure.
Makes one argument function out of two argument function when the second argument is known.
 */
Function makeOneArgumentFunctionWithSecondArgumentAsDefaultOne(Function twoArgumentFunction, int upperLimit) {
  return (int number) => twoArgumentFunction(number, upperLimit);
}

/*
Gets index of a fibonacci number that satisfies condition.
Condition is a function that takes two parameters and returns bool value if is satisfied.
 */
int getFibIndex(condition) =>
  getFibIndex_(0, condition);

/*
Helper function that checks if Fibonacci number of specific index satisfies a condition.
 */
int getFibIndex_(int index, condition) =>
  condition(getFib(index)) ? index : getFibIndex_(index + 1, condition);

/*
Checks if number is even.
 */
bool isEven(int number) =>
  number % 2 == 0 ? true : false;

/*
Function that gets n-th Fibonacci number
 */
int getFib(int n) =>
  n < 2 ? n : getFib(n - 1) + getFib(n - 2);

/*
The answer is 4613732.
 */